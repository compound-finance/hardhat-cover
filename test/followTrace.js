const assert = require('assert');
const lib = require('../dist/index.js');

describe('followTrace', () => {
  it('follows a single instruction', async () => {
    const to = null;
    const trace = [{
      pc: 0,
      op: 'PUSH1',
      depth: 1,
      stack: [],
      memory: [],
      storage: {}
    }];
    const tagged = [...lib.Trace.followInfo({
      txHash: '0x',
      txData: {to},
      traced: {structLogs: trace}
    })];
    assert.deepEqual(tagged, [ { address: to, ...trace[0] } ]);
  });

  it('follows a basic trace', async () => {
    const to = '0x12345';
    const trace = [{
      pc: 0,
      op: 'PUSH1',
      depth: 1,
      stack: [],
      memory: [],
      storage: {}
    }, {
      pc: 2,
      op: 'PUSH1',
      depth: 1,
      stack: [
        '0000000000000000000000000000000000000000000000000000000000000080'
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      storage: {}
    }, {
      pc: 4,
      op: 'MSTORE',
      depth: 1,
      stack: [
        '0000000000000000000000000000000000000000000000000000000000000080',
        '0000000000000000000000000000000000000000000000000000000000000040'
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      storage: {}
    }];

    const tagged = [...lib.Trace.followInfo({
      txHash: '0x',
      txData: {to},
      traced: {structLogs: trace}
    })];
    assert.deepEqual(tagged, [
      { address: to, ...trace[0] },
      { address: to, ...trace[1] },
      { address: to, ...trace[2] }
    ]);
  });

  it('follows a call', async () => {
    const to = '0x12345';
    const trace = [{
      pc: 0,
      op: 'PUSH1',
      depth: 1,
      stack: [],
      memory: [],
      storage: {}
    }, {
      pc: 2,
      op: 'PUSH1',
      depth: 1,
      stack: [
        '0000000000000000000000000000000000000000000000000000000000000080'
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      storage: {}
    }, {
      pc: 4,
      op: 'CALL',
      depth: 1,
      stack: [
        '0000000000000000000000000000000000000000000000000000000000000080',
        '0000000000000000000000000000000000000000000000000000000000000040'
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      storage: {}
    }, {
      pc: 8,
      op: 'PUSH1',
      depth: 2,
      stack: [
        '00000000000000000000000000000000000000000000000000000000095ea7b3',
        '00000000000000000000000000000000000000000000000000000000000000a0'
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      storage: {}
    }];

    const tagged = [...lib.Trace.followInfo({
      txHash: '0x',
      txData: {to},
      traced: {structLogs: trace}
    })];
    assert.deepEqual(tagged, [
      { address: to, ...trace[0] },
      { address: to, ...trace[1] },
      { address: to, ...trace[2] },
      { address: '0x0000000000000000000000000000000000000080', ...trace[3] }
    ]);
  });

  it('follows a create', async () => {
    const to = '0x12345';
    const trace = [{
      pc: 0,
      op: 'PUSH1',
      depth: 1,
      stack: [],
      memory: [],
      storage: {}
    }, {
      pc: 2,
      op: 'PUSH1',
      depth: 1,
      stack: [
        '00000000000000000000000000000000000000000000000000000000428c93d7',
        '0000000000000000000000000000000000000000000000000000000000000051',
        '0000000000000000000000000000000000000000000000000000000000000024',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000009c4d',
        '0000000000000000000000000000000000000000000000000000000000000080',
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      storage: {}
    }, {
      pc: 4,
      op: 'CREATE',
      depth: 1,
      stack: [
        '00000000000000000000000000000000000000000000000000000000428c93d7',
        '0000000000000000000000000000000000000000000000000000000000000051',
        '0000000000000000000000000000000000000000000000000000000000000024',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000009c4d',
        '0000000000000000000000000000000000000000000000000000000000000080',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000080',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '6106e06040523480156200001257600080fd5b506040516200972d3803806200',
      ],
      storage: {}
    }, {
      pc: 8,
      op: 'PUSH1',
      depth: 2,
      stack: [
        '00000000000000000000000000000000000000000000000000000000095ea7b3',
        '0000000000000000000000000000000000000000000000000000000000067890'
      ],
      memory: [
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000000'
      ],
      storage: {}
    }];

    const tagged = [...lib.Trace.followInfo({
      txHash: '0x',
      txData: {to},
      traced: {structLogs: trace}
    })];
    assert.deepEqual(tagged, [
      { address: to, ...trace[0] },
      { address: to, ...trace[1] },
      { address: to, ...trace[2] },
      { bytecode: '6106e06040523480156200001257600080fd5b506040516200972d3803806200', ...trace[3] }
    ]);
  });
});